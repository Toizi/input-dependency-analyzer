; ModuleID = '../../examples/hello.bc'
source_filename = "hello.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; -- Generated by llvm-slicer --
;   * slicing criterion: '  store i32 0, i32* %retval, align 4'

; Function Attrs: nounwind uwtable
define i32 @func1(i32 %test, i32 %test1) #0 {
entry:
  ; x   %test.addr = alloca i32, align 4
  ; x   %test1.addr = alloca i32, align 4
  ; x   store i32 %test, i32* %test.addr, align 4
  ; x   store i32 %test1, i32* %test1.addr, align 4
  ; x   %0 = load i32, i32* %test.addr, align 4
  ; x   %inc = add nsw i32 %0, 1
  ; x   store i32 %inc, i32* %test.addr, align 4
  ; x   %1 = load i32, i32* %test.addr, align 4
  ; x   ret i32 %1
}

; Function Attrs: nounwind uwtable
define i32 @main(i32 %test2) #0 {
entry:
  %retval = alloca i32, align 4
  ; x   %test2.addr = alloca i32, align 4
  ; x   %test = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  ; x   store i32 %test2, i32* %test2.addr, align 4
  ; x   store i32 0, i32* %test, align 4
  ; x   %0 = load i32, i32* %test, align 4
  ; x   %call = call i32 @func1(i32 %0, i32 1)
  ; x   store i32 %call, i32* %test2.addr, align 4
  ; x   ret i32 0
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (trunk 280635)"}
